@using Humanizer
@using LinkDotNet.NCronJob.Messaging.States
@using LinkDotNet.NCronJob.Shared
@using NCronJob.Dashboard.Data

@implements IDisposable
@inject AgentManager AgentManager
@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    public JobDetailsView Job { get; set; }

    [Parameter]
    public string AgentId { get; set; }

    [Parameter]
    public EventCallback<(string jobSpanId, Guid jobId)> OnJobClickCallback { get; set; }

    private string HashedAgentId => AgentId.Substring(AgentId.Length - 5);
    private Dictionary<string, bool> jobActionStates = new Dictionary<string, bool>();
    private CancellationTokenSource cts = new();

    private bool IsStarting => jobActionStates[JobAction.Start.ToString()];
    private bool IsStopping => jobActionStates[JobAction.Stop.ToString()];
    private bool IsPausing => jobActionStates[JobAction.Pause.ToString()];
    private bool IsResuming => jobActionStates[JobAction.Resume.ToString()];
    private bool IsRestarting => jobActionStates[JobAction.Restart.ToString()];
    private bool IsTriggering => jobActionStates[JobAction.Trigger.ToString()];
    private bool IsCancelling => jobActionStates[JobAction.Cancel.ToString()];
    private string StartTooltipText => IsStarting ? "Starting Job Scheduler..." : "Start Job Scheduler";
    private string StopTooltipText => IsStopping ? "Stopping Job Scheduler..." : "Stop Job Scheduler";
    private string PauseTooltipText => IsPausing ? "Pausing Job Scheduler..." : "Pause Job Scheduler";
    private string ResumeTooltipText => IsResuming ? "Resuming Job Scheduler..." : "Resume Job Scheduler";
    private string RestartTooltipText => IsRestarting ? "Restarting Job Scheduler..." : "Restart Job Scheduler";
    private string TriggerTooltipText => IsTriggering ? "Job {0} Triggering..." : "Trigger {0} Job";
    private string CancelTooltipText => IsCancelling ? "Cancelling {0} Job..." : "Cancel Running Job {0}";

    protected override void OnInitialized()
    {
        foreach (JobAction action in Enum.GetValues(typeof(JobAction)))
        {
            jobActionStates[action.ToString()] = false;
        }
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initFlowbite");
        }
    }


    private async Task ToggleJobClickAsync()
    {
        await OnJobClickCallback.InvokeAsync((AgentId, Job.JobId));
    }

    private async Task HandleJobAction(JobAction action, Guid jobId)
    {
        jobActionStates[action.ToString()] = true;
        try
        {
            var result = action switch
            {
                JobAction.Trigger => await AgentManager.GetAgentProxy(AgentId).TriggerJob(jobId),
                JobAction.Cancel => await AgentManager.GetAgentProxy(AgentId).CancelJob(jobId),
                _ => throw new ArgumentOutOfRangeException(nameof(action), action, null)
            };
            Console.WriteLine($"{action} job: {Job.JobName} with message: {result.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{action} Error for job: {ex.Message}. Exception: {ex.Message}");
        }
        finally
        {
            jobActionStates[action.ToString()] = false;
        }
    }

    private string GetRunningTime()
    {
        if (Job?.CurrentRunStartTime == null || !Job.JobIsRunning)
        {
            return string.Empty;
        }

        var runningTime = DateTimeOffset.Now - Job.CurrentRunStartTime.Value;
        return runningTime.ToHumanDuration();
    }

    public enum JobAction
    {
        Start,
        Stop,
        Pause,
        Resume,
        Restart,
        Trigger,
        Cancel
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }

}

<tr id="@($"row-{Job.JobName}-{HashedAgentId}")" class="job-row cursor-pointer transition-shadow duration-150 ease-in-out hover:shadow-md hover:bg-gray-100 dark:hover:bg-gray-700" @onclick="@(ToggleJobClickAsync)">
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
        <span>
            @Job.JobName
        </span>
    </td>
    <td class="px-6 py-4 whitespace-nowrap text-sm min-w-[200px]">
        <div class="flex flex-col">
            <div class="text-gray-900 font-medium">
                <span class="tooltip" data-tip="@Job.LastRunTime">
                    Last:
                    @if (Job.JobIsRunning)
                    {
                        <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-md text-xs font-medium bg-green-100 text-green-800">
                            <svg class="-ml-0.5 mr-1.5 h-2 w-2 text-green-400" fill="currentColor" viewBox="0 0 8 8">
                                <circle cx="4" cy="4" r="3" />
                            </svg>
                            Running @GetRunningTime()
                        </span>
                    }
                    else
                    {
                        @(Job.LastRunTime == null || Job.LastRunTime == DateTimeOffset.MinValue ? "N/A" : Job.LastRunTime.Value.Humanize())
                    }
                </span>
            </div>
            <div class="text-gray-500 min-w-[200px]">
                <div id="tooltip-next-@Job.JobName" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700">
                    Scheduled to Run on @Job.NextRunTime?.DateTime.ToOrdinalWords() @@ @Job.NextRunTime?.DateTime.ToShortTimeString()
                    <div class="tooltip-arrow" data-popper-arrow></div>
                </div>
                <span data-tooltip-target="tooltip-next-@Job.JobName">
                    Next:
                    <span class="truncate" style="width: 200px;">
                        @Job.NextRunTime?.Humanize()
                    </span>
                </span>
            </div>
        </div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@Job.ExecutionCount</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500" @onclick:stopPropagation="true">
        <div class="flex items-center justify-start space-x-2">
            <div class="flex items-center space-x-4">
                @if (Job.JobIsRunning)
                {
                    <span class="tooltip" data-tip="Job is Running">
                        <svg class="running-icon w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17.7 7.7A7.1 7.1 0 0 0 5 10.8M18 4v4h-4m-7.7 8.3A7.1 7.1 0 0 0 19 13.2M6 20v-4h4" />
                        </svg>
                    </span>
                    @if (Job.IsCancellable)
                    {
                        <div class="tooltip ml-4" data-tip="@string.Format(CancelTooltipText, Job.JobName)">
                            <button class="text-red-600 hover:text-red-800 rounded-lg shadow-sm p-0 transition duration-150 ease-in-out disabled:bg-gray-100 disabled:border-gray-300 disabled:text-gray-400 disabled:cursor-not-allowed"
                                    disabled="@IsCancelling"
                                    @onclick="() => HandleJobAction(JobAction.Cancel, Job.JobId)">
                                <span class="inline-block w-4 text-center">
                                    @if (IsCancelling)
                                    {
                                        <i class="fas fa-spinner fa-spin"></i>
                                    }
                                    else
                                    {
                                        <i class="fa-regular fa-rectangle-xmark fa-xl"></i>
                                    }
                                </span>
                            </button>
                        </div>
                    }

                }
                else
                {
                    <span class="tooltip" data-tip="Job is Scheduled to run">
                        <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                    </span>
                }
            </div>

        </div>
    </td>

    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 relative group">
        @Job.CronExpression
    </td>
    <td class="px-6 py-4 whitespace-nowrap relative" @onclick:stopPropagation="true">
        <div class="tooltip" data-tip="@StartTooltipText">
            <button class="text-blue-600 hover:text-blue-900 disabled:text-gray-400 disabled:cursor-not-allowed focus:outline-none" disabled="@IsStarting" @onclick="() => HandleJobAction(JobAction.Start, Job.JobId)">
                <span class="inline-block w-4 text-center"><i class="fas fa-play"></i></span>
            </button>
        </div>
        <div class="tooltip pl-1" data-tip="@StopTooltipText">
            <button class="text-red-600 hover:text-red-900 disabled:text-gray-400 disabled:cursor-not-allowed focus:outline-none" disabled="@IsStopping" @onclick="() => HandleJobAction(JobAction.Stop, Job.JobId)">
                <span class="inline-block w-4 text-center"><i class="fas fa-stop"></i></span>
            </button>
        </div>
        @if (Job.IsPaused)
        {
            <div class="tooltip pl-2" data-tip="@ResumeTooltipText">
                <button class="text-green-600 hover:text-green-900 disabled:text-gray-400 disabled:cursor-not-allowed focus:outline-none" disabled="@IsResuming" @onclick="() => HandleJobAction(JobAction.Resume, Job.JobId)">
                    <span class="inline-block w-4 text-center"><i class="fas fa-play-circle"></i></span>
                </button>
            </div>
        }
        else
        {
            <div class="tooltip pl-2" data-tip="@PauseTooltipText">
                <button class="text-yellow-600 hover:text-yellow-900 disabled:text-gray-400 disabled:cursor-not-allowed focus:outline-none" disabled="@IsPausing" @onclick="() => HandleJobAction(JobAction.Pause, Job.JobId)">
                    <span class="inline-block w-4 text-center"><i class="fas fa-pause"></i></span>
                </button>
            </div>
        }
        <div class="tooltip pl-2" data-tip="@RestartTooltipText">
            <button class="text-green-600 hover:text-green-900 disabled:text-gray-400 disabled:cursor-not-allowed focus:outline-none" disabled="@IsRestarting" @onclick="() => HandleJobAction(JobAction.Restart, Job.JobId)">
                <span class="inline-block w-4 text-center"><i class="fas fa-redo"></i></span>
            </button>
        </div>
        <div class="before:z-50 before:content-[attr(data-tip)] tooltip tooltip-left pl-1" data-tip="@string.Format(TriggerTooltipText, Job.JobName)">
            <button class="text-purple-600 hover:text-purple-900 disabled:text-gray-400 disabled:cursor-not-allowed focus:outline-none" disabled="@IsTriggering" @onclick="() => HandleJobAction(JobAction.Trigger, Job.JobId)">
                <span class="inline-block w-4 text-center"><i class="fas fa-bolt"></i></span>
            </button>
        </div>
    </td>

</tr>
